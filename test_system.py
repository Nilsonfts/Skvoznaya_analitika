#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import asyncio
import sys
import traceback
from datetime import datetime

async def test_system():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–Å–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò")
    print("=" * 50)
    
    tests_passed = 0
    tests_total = 0
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç Analytics Service
    tests_total += 1
    try:
        from services.analytics import AnalyticsService
        analytics = AnalyticsService()
        print("‚úÖ Analytics Service - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Analytics Service - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ò–º–ø–æ—Ä—Ç Visualization Service  
    tests_total += 1
    try:
        from services.visualization import get_visualization_service
        vis = get_visualization_service()
        print("‚úÖ Visualization Service - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Visualization Service - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 3: Rate Limiter
    tests_total += 1
    try:
        from utils.rate_limiter import RateLimiter, rate_limit, admin_rate_limit
        limiter = RateLimiter()
        print("‚úÖ Rate Limiter - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Rate Limiter - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 4: Error Handler
    tests_total += 1
    try:
        from utils.error_handler import get_error_handler, ErrorMetrics
        handler = get_error_handler()
        metrics = ErrorMetrics()
        print("‚úÖ Error Handler - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Error Handler - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 5: Database Service
    tests_total += 1
    try:
        from services.database import DatabaseService
        print("‚úÖ Database Service - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Database Service - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 6: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    tests_total += 1
    try:
        from config import USE_POSTGRES, REDIS_URL, EMOJI
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    # –¢–µ—Å—Ç 7: –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    tests_total += 1
    try:
        from handlers.commands import (
            channels_chart_command, segments_chart_command,
            forecast_command, compare_channels_command, status_command
        )
        print("‚úÖ –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 8: –†–∞—Å—á—ë—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    tests_total += 1
    try:
        from utils.calculations import (
            calculate_seasonal_coefficient, calculate_cac,
            calculate_ltv, calculate_roi
        )
        # –¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–∞—Ä–∞–æ–∫–µ
        coeff_dec = calculate_seasonal_coefficient(12)  # –î–µ–∫–∞–±—Ä—å
        coeff_jul = calculate_seasonal_coefficient(7)   # –ò—é–ª—å
        
        if coeff_dec > 1.3 and coeff_jul < 1.0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–∞—Ä–∞–æ–∫–µ-–±–∞—Ä–∞
            print("‚úÖ –†–∞—Å—á—ë—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ–∫–∞–±—Ä—è: {coeff_dec:.2f}")
            print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—é–ª—è: {coeff_jul:.2f}")
            tests_passed += 1
        else:
            print("‚ö†Ô∏è –†–∞—Å—á—ë—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏")
    except Exception as e:
        print(f"‚ùå –†–∞—Å—á—ë—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –æ—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}/{tests_total}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {tests_passed/tests_total*100:.1f}%")
    
    if tests_passed == tests_total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.")
        return False

def test_visualization():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    print("\nüé® –¢–ï–°–¢ –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò:")
    try:
        from services.visualization import get_visualization_service
        
        vis = get_visualization_service()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        test_channels = [
            {
                'name': 'Instagram',
                'revenue': 150000,
                'roi': 0.35,
                'conversion_rate': 0.08,
                'cac': 2500
            },
            {
                'name': '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', 
                'revenue': 120000,
                'roi': 0.28,
                'conversion_rate': 0.06,
                'cac': 3000
            }
        ]
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        chart_buffer = vis.create_channel_performance_chart(test_channels)
        
        if chart_buffer and len(chart_buffer.getvalue()) > 1000:
            print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üïê –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        system_ok = await test_system()
        
        # –¢–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        viz_ok = test_visualization()
        
        print(f"\nüïê –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if system_ok and viz_ok:
            print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫—Ç—Ä–µ–π—Å:")
        traceback.print_exc()
        sys.exit(2)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.run(main())
