#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π calculations.py –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_calculations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ calculations.py"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è calculations.py")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∑ config
        from config import SEGMENT_CONFIG, LTV_CONFIG, CHANNEL_COSTS
        print("‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ config.py –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        print(f"   - SEGMENT_CONFIG: {list(SEGMENT_CONFIG.keys())}")
        print(f"   - LTV_CONFIG: {LTV_CONFIG}")
        print(f"   - CHANNEL_COSTS: {len(CHANNEL_COSTS)} –∫–∞–Ω–∞–ª–æ–≤")
        
        # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
        from utils.calculations import (
            calculate_cac,
            calculate_ltv,
            determine_client_segment,
            calculate_roi,
            calculate_conversion,
            calculate_channel_rating,
            calculate_payback_period,
            calculate_monthly_growth_rate,
            calculate_customer_lifetime_months,
            calculate_channel_efficiency_score,
            calculate_market_share,
            calculate_customer_acquisition_funnel,
            calculate_seasonal_coefficient
        )
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ calculations.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:")
        print("-" * 30)
        
        # –¢–µ—Å—Ç 1: CAC
        cac = calculate_cac(50000, 100)
        print(f"1. CAC (50000‚ÇΩ, 100 –∫–ª–∏–µ–Ω—Ç–æ–≤): {cac}‚ÇΩ")
        assert cac == 500, f"–û–∂–∏–¥–∞–ª—Å—è CAC=500, –ø–æ–ª—É—á–µ–Ω {cac}"
        
        # –¢–µ—Å—Ç 2: LTV
        ltv = calculate_ltv(5000, 3, [4500, 5500, 4800])
        print(f"2. LTV —Å —Å—É–º–º–∞–º–∏ –≤–∏–∑–∏—Ç–æ–≤ [4500, 5500, 4800]: {ltv}‚ÇΩ")
        assert ltv == 14800, f"–û–∂–∏–¥–∞–ª—Å—è LTV=14800, –ø–æ–ª—É—á–µ–Ω {ltv}"
        
        # –¢–µ—Å—Ç 3: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
        segment = determine_client_segment(4, 20000, [4500, 5500, 4800, 6200])
        print(f"3. –°–µ–≥–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞ (4 –≤–∏–∑–∏—Ç–∞, —Å—É–º–º–∞ 20000‚ÇΩ): {segment}")
        assert segment in ["VIP", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π", "–ê–∫—Ç–∏–≤–Ω—ã–π", "–ù–æ–≤—ã–π"], f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç: {segment}"
        
        # –¢–µ—Å—Ç 4: ROI
        roi = calculate_roi(120000, 50000)
        print(f"4. ROI (–≤—ã—Ä—É—á–∫–∞ 120000‚ÇΩ, –∑–∞—Ç—Ä–∞—Ç—ã 50000‚ÇΩ): {roi:.1%}")
        assert abs(roi - 1.4) < 0.01, f"–û–∂–∏–¥–∞–ª—Å—è ROI=1.4, –ø–æ–ª—É—á–µ–Ω {roi}"
        
        # –¢–µ—Å—Ç 5: –ö–æ–Ω–≤–µ—Ä—Å–∏—è
        conversion = calculate_conversion(25, 100)
        print(f"5. –ö–æ–Ω–≤–µ—Ä—Å–∏—è (25 –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ 100 –ª–∏–¥–æ–≤): {conversion:.1%}")
        assert conversion == 0.25, f"–û–∂–∏–¥–∞–ª–∞—Å—å –∫–æ–Ω–≤–µ—Ä—Å–∏—è=0.25, –ø–æ–ª—É—á–µ–Ω–∞ {conversion}"
        
        # –¢–µ—Å—Ç 6: –†–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞
        rating = calculate_channel_rating(1.4, 0.25, 2000)
        print(f"6. –†–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ (ROI: 140%, –∫–æ–Ω–≤–µ—Ä—Å–∏—è: 25%, CAC: 2000‚ÇΩ): {rating:.1f}/5.0")
        assert 1.0 <= rating <= 5.0, f"–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5, –ø–æ–ª—É—á–µ–Ω {rating}"
        
        # –¢–µ—Å—Ç 7: –ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback = calculate_payback_period(2000, 1000)
        print(f"7. –ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ (CAC: 2000‚ÇΩ, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: 1000‚ÇΩ): {payback} –≤–∏–∑–∏—Ç–æ–≤")
        assert payback == 2.0, f"–û–∂–∏–¥–∞–ª—Å—è –ø–µ—Ä–∏–æ–¥=2.0, –ø–æ–ª—É—á–µ–Ω {payback}"
        
        # –¢–µ—Å—Ç 8: –¢–µ–º–ø —Ä–æ—Å—Ç–∞
        growth = calculate_monthly_growth_rate(120000, 100000)
        print(f"8. –¢–µ–º–ø —Ä–æ—Å—Ç–∞ (120000‚ÇΩ vs 100000‚ÇΩ): {growth:.1%}")
        assert growth == 0.2, f"–û–∂–∏–¥–∞–ª—Å—è —Ä–æ—Å—Ç=0.2, –ø–æ–ª—É—á–µ–Ω {growth}"
        
        # –¢–µ—Å—Ç 9: –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
        lifetime = calculate_customer_lifetime_months("2024-01-01", "2024-06-01")
        print(f"9. –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ (—è–Ω–≤-–∏—é–Ω—å 2024): {lifetime} –º–µ—Å—è—Ü–µ–≤")
        assert lifetime == 5, f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 –º–µ—Å—è—Ü–µ–≤, –ø–æ–ª—É—á–µ–Ω–æ {lifetime}"
        
        # –¢–µ—Å—Ç 10: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
        channel_data = {'roi': 1.4, 'conversion': 0.25, 'cac': 2000, 'ltv': 10000}
        efficiency = calculate_channel_efficiency_score(channel_data)
        print(f"10. –ò–Ω–¥–µ–∫—Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞: {efficiency:.1f}/100")
        assert 0 <= efficiency <= 100, f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100, –ø–æ–ª—É—á–µ–Ω–∞ {efficiency}"
        
        # –¢–µ—Å—Ç 11: –î–æ–ª—è —Ä—ã–Ω–∫–∞
        market_share = calculate_market_share(30000, 120000)
        print(f"11. –î–æ–ª—è –∫–∞–Ω–∞–ª–∞ –≤ –≤—ã—Ä—É—á–∫–µ (30000‚ÇΩ –∏–∑ 120000‚ÇΩ): {market_share:.1%}")
        assert abs(market_share - 0.25) < 0.01, f"–û–∂–∏–¥–∞–ª–∞—Å—å –¥–æ–ª—è=0.25, –ø–æ–ª—É—á–µ–Ω–∞ {market_share}"
        
        # –¢–µ—Å—Ç 12: –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        funnel = calculate_customer_acquisition_funnel(10000, 500, 100, 25)
        print(f"12. –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (10000‚Üí500‚Üí100‚Üí25):")
        print(f"    CTR: {funnel['ctr']:.1%}, Lead conv: {funnel['lead_conversion']:.1%}")
        assert funnel['clients'] == 25, f"–û–∂–∏–¥–∞–ª–æ—Å—å 25 –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {funnel['clients']}"
        
        # –¢–µ—Å—Ç 13: –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        winter_coeff = calculate_seasonal_coefficient(12)  # –î–µ–∫–∞–±—Ä—å
        summer_coeff = calculate_seasonal_coefficient(7)   # –ò—é–ª—å
        print(f"13. –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: –¥–µ–∫–∞–±—Ä—å={winter_coeff}, –∏—é–ª—å={summer_coeff}")
        assert winter_coeff > summer_coeff, f"–î–µ–∫–∞–±—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ –∏—é–ª—è"
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ú–æ–¥—É–ª—å calculations.py —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_calculations()
    sys.exit(0 if success else 1)
