#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
"""

import os
import sys
import json
from typing import List, Tuple

def check_required_env_vars() -> List[Tuple[str, str, bool]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–π–¥–µ–Ω–∞)
    """
    required_vars = [
        ('BOT_TOKEN', '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞', False),
        ('GOOGLE_CREDENTIALS_JSON', 'JSON –∫–ª—é—á Google API –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É', False),
        ('SPREADSHEET_ID', 'ID –æ—Å–Ω–æ–≤–Ω–æ–π Google —Ç–∞–±–ª–∏—Ü—ã', False),
    ]
    
    results = []
    for var_name, description, _ in required_vars:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        value = None
        if var_name == 'BOT_TOKEN':
            value = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_TOKEN')
        elif var_name == 'GOOGLE_CREDENTIALS_JSON':
            value = os.getenv('GOOGLE_CREDENTIALS_JSON') or os.getenv('GOOGLE_CREDENTIALS_FILE')
        else:
            value = os.getenv(var_name)
        
        is_found = bool(value and value.strip())
        results.append((var_name, description, is_found))
    
    return results

def check_optional_env_vars() -> List[Tuple[str, str, bool]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–π–¥–µ–Ω–∞)
    """
    optional_vars = [
        ('ADMIN_IDS', 'ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ Telegram'),
        ('REPORT_CHAT_ID', 'ID —á–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤'),
        ('METRIKA_COUNTER_ID', 'ID —Å—á—ë—Ç—á–∏–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏'),
        ('METRIKA_OAUTH_TOKEN', 'OAuth —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏'),
        ('GA_PROPERTY_ID', 'ID —Å–≤–æ–π—Å—Ç–≤–∞ Google Analytics'),
        ('AMOCRM_SHEET_ID', 'ID —Ç–∞–±–ª–∏—Ü—ã AmoCRM'),
        ('USE_POSTGRES', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PostgreSQL'),
        ('DATABASE_URL', 'URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL'),
        ('REDIS_HOST', '–•–æ—Å—Ç Redis —Å–µ—Ä–≤–µ—Ä–∞'),
        ('DEBUG_MODE', '–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏'),
        ('TIMEZONE', '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å')
    ]
    
    results = []
    for var_name, description in optional_vars:
        value = os.getenv(var_name)
        is_found = bool(value and value.strip())
        results.append((var_name, description, is_found))
    
    return results

def validate_json_credentials() -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è JSON –∫–ª—é—á–µ–π Google API
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π JSON
    json_content = os.getenv('GOOGLE_CREDENTIALS_JSON', '')
    if json_content:
        try:
            credentials = json.loads(json_content)
            required_fields = ['type', 'project_id', 'private_key', 'client_email']
            missing_fields = [field for field in required_fields if field not in credentials]
            
            if missing_fields:
                return False, f"–í JSON –∫–ª—é—á–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}"
            
            return True, "JSON –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω"
        except json.JSONDecodeError:
            return False, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ GOOGLE_CREDENTIALS_JSON"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
    credentials_file = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')
    if os.path.exists(credentials_file):
        try:
            with open(credentials_file, 'r') as f:
                credentials = json.load(f)
            
            required_fields = ['type', 'project_id', 'private_key', 'client_email']
            missing_fields = [field for field in required_fields if field not in credentials]
            
            if missing_fields:
                return False, f"–í —Ñ–∞–π–ª–µ {credentials_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}"
            
            return True, f"–§–∞–π–ª {credentials_file} –≤–∞–ª–∏–¥–µ–Ω"
        except (json.JSONDecodeError, IOError) as e:
            return False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {credentials_file}: {e}"
    
    return False, "–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ JSON –∫–ª—é—á, –Ω–∏ —Ñ–∞–π–ª —Å credentials"

def validate_spreadsheet_id() -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è ID Google —Ç–∞–±–ª–∏—Ü—ã
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    spreadsheet_id = os.getenv('SPREADSHEET_ID', '')
    if not spreadsheet_id:
        return False, "SPREADSHEET_ID –Ω–µ —É–∫–∞–∑–∞–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
    if len(spreadsheet_id) < 20 or not all(c.isalnum() or c in '-_' for c in spreadsheet_id):
        return False, f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SPREADSHEET_ID: {spreadsheet_id}"
    
    return True, f"SPREADSHEET_ID –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {spreadsheet_id}"

def validate_telegram_token() -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    token = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_TOKEN')
    if not token:
        return False, "BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11)
    if ':' not in token or len(token) < 35:
        return False, f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BOT_TOKEN"
    
    return True, "BOT_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

def validate_ids(var_name: str, description: str) -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ ID
    
    Args:
        var_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    ids_str = os.getenv(var_name, '')
    if not ids_str:
        return True, f"{description}: –Ω–µ —É–∫–∞–∑–∞–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    
    try:
        ids = [x.strip() for x in ids_str.split(',') if x.strip()]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ ID —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–ª—è –≥—Ä—É–ø–ø)
        for id_str in ids:
            int(id_str)
        
        return True, f"{description}: –Ω–∞–π–¥–µ–Ω–æ {len(ids)} ID"
    except ValueError:
        return False, f"{description}: —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞")
    print("=" * 60)
    
    all_valid = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    print("\nüìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    required_vars = check_required_env_vars()
    for var_name, description, is_found in required_vars:
        status = "‚úÖ" if is_found else "‚ùå"
        print(f"  {status} {var_name}: {description}")
        if not is_found:
            all_valid = False
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("\nüîß –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
    
    # Telegram —Ç–æ–∫–µ–Ω
    token_valid, token_msg = validate_telegram_token()
    status = "‚úÖ" if token_valid else "‚ùå"
    print(f"  {status} Telegram Token: {token_msg}")
    if not token_valid:
        all_valid = False
    
    # Google credentials
    creds_valid, creds_msg = validate_json_credentials()
    status = "‚úÖ" if creds_valid else "‚ùå"
    print(f"  {status} Google Credentials: {creds_msg}")
    if not creds_valid:
        all_valid = False
    
    # Spreadsheet ID
    sheet_valid, sheet_msg = validate_spreadsheet_id()
    status = "‚úÖ" if sheet_valid else "‚ùå"
    print(f"  {status} Spreadsheet ID: {sheet_msg}")
    if not sheet_valid:
        all_valid = False
    
    # ID —Å–ø–∏—Å–∫–∏
    for var_name, description in [('ADMIN_IDS', 'Admin IDs'), ('REPORT_CHAT_ID', 'Report Chat IDs')]:
        ids_valid, ids_msg = validate_ids(var_name, description)
        status = "‚úÖ" if ids_valid else "‚ö†Ô∏è"
        print(f"  {status} {ids_msg}")
        if not ids_valid:
            all_valid = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    print("\nüìù –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    optional_vars = check_optional_env_vars()
    for var_name, description, is_found in optional_vars:
        status = "‚úÖ" if is_found else "‚ö™"
        print(f"  {status} {var_name}: {description}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    if all_valid:
        print("üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        return 0
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:")
        print("  1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env")
        print("  2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        print("  3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É @BotFather")
        print("  4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google API credentials")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
