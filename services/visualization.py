"""
–°–µ—Ä–≤–∏—Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º
"""

import io
import logging
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º non-GUI backend
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.dates import DateFormatter
import seaborn as sns
import pandas as pd
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['axes.unicode_minus'] = False

logger = logging.getLogger(__name__)

class VisualizationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        sns.set_style("whitegrid")
        self.colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57', '#FF9FF3', '#54A0FF']
    
    def create_channel_performance_chart(self, channels: List[Dict[str, Any]]) -> io.BytesIO:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤
        
        Args:
            channels: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            
        Returns:
            BytesIO –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞
        """
        try:
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
            fig.suptitle('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è', fontsize=16, fontweight='bold')
            
            if not channels:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                for ax in [ax1, ax2, ax3, ax4]:
                    ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
                           ha='center', va='center', transform=ax.transAxes, fontsize=12)
                    ax.set_xticks([])
                    ax.set_yticks([])
                
                buf = io.BytesIO()
                plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
                buf.seek(0)
                plt.close()
                return buf
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            channel_names = [ch['name'] for ch in channels[:7]]  # –¢–æ–ø 7 –∫–∞–Ω–∞–ª–æ–≤
            revenues = [ch.get('revenue', 0) for ch in channels[:7]]
            roi_values = [ch.get('roi', 0) * 100 for ch in channels[:7]]  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            conversions = [ch.get('conversion_rate', 0) * 100 for ch in channels[:7]]  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            cac_values = [ch.get('cac', 0) for ch in channels[:7]]
            
            # 1. –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º (—Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)
            bars1 = ax1.bar(channel_names, revenues, color=self.colors[:len(channel_names)])
            ax1.set_title('üí∞ –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º', fontweight='bold')
            ax1.set_ylabel('–í—ã—Ä—É—á–∫–∞, ‚ÇΩ')
            ax1.tick_params(axis='x', rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars1, revenues):
                if value > 0:
                    ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(revenues)*0.01,
                            f'{value:,.0f}‚ÇΩ', ha='center', va='bottom', fontsize=9)
            
            # 2. ROI –ø–æ –∫–∞–Ω–∞–ª–∞–º
            bars2 = ax2.bar(channel_names, roi_values, 
                           color=['green' if x > 0 else 'red' for x in roi_values])
            ax2.set_title('üìà ROI –ø–æ –∫–∞–Ω–∞–ª–∞–º', fontweight='bold')
            ax2.set_ylabel('ROI, %')
            ax2.tick_params(axis='x', rotation=45)
            ax2.axhline(y=0, color='black', linestyle='-', linewidth=0.5)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars2, roi_values):
                ax2.text(bar.get_x() + bar.get_width()/2, 
                        bar.get_height() + (5 if value > 0 else -10),
                        f'{value:.1f}%', ha='center', 
                        va='bottom' if value > 0 else 'top', fontsize=9)
            
            # 3. –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º
            bars3 = ax3.bar(channel_names, conversions, color=self.colors[2:2+len(channel_names)])
            ax3.set_title('üéØ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º', fontweight='bold')
            ax3.set_ylabel('–ö–æ–Ω–≤–µ—Ä—Å–∏—è, %')
            ax3.tick_params(axis='x', rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars3, conversions):
                if value > 0:
                    ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(conversions)*0.01,
                            f'{value:.1f}%', ha='center', va='bottom', fontsize=9)
            
            # 4. CAC –ø–æ –∫–∞–Ω–∞–ª–∞–º
            bars4 = ax4.bar(channel_names, cac_values, color=self.colors[4:4+len(channel_names)])
            ax4.set_title('üí∏ CAC –ø–æ –∫–∞–Ω–∞–ª–∞–º', fontweight='bold')
            ax4.set_ylabel('CAC, ‚ÇΩ')
            ax4.tick_params(axis='x', rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars4, cac_values):
                if value > 0:
                    ax4.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(cac_values)*0.01,
                            f'{value:,.0f}‚ÇΩ', ha='center', va='bottom', fontsize=9)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return self._create_error_chart("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
    
    def create_segments_pie_chart(self, segments: List[Dict[str, Any]]) -> io.BytesIO:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
        
        Args:
            segments: –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
            
        Returns:
            BytesIO –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
        """
        try:
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))
            fig.suptitle('üë• –ê–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤', fontsize=16, fontweight='bold')
            
            if not segments:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                for ax in [ax1, ax2]:
                    ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
                           ha='center', va='center', transform=ax.transAxes, fontsize=12)
                    ax.set_xticks([])
                    ax.set_yticks([])
                
                buf = io.BytesIO()
                plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
                buf.seek(0)
                plt.close()
                return buf
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            segment_names = [s['segment'] for s in segments]
            client_counts = [s.get('clients_count', 0) for s in segments]
            revenues = [s.get('avg_revenue', 0) for s in segments]
            
            # 1. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª–∏–µ–Ω—Ç–æ–≤
            if sum(client_counts) > 0:
                wedges1, texts1, autotexts1 = ax1.pie(
                    client_counts, 
                    labels=segment_names,
                    autopct='%1.1f%%',
                    colors=self.colors[:len(segments)],
                    startangle=90
                )
                ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º', fontweight='bold')
                
                # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                for autotext in autotexts1:
                    autotext.set_color('white')
                    autotext.set_fontweight('bold')
            else:
                ax1.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö', 
                        ha='center', va='center', transform=ax1.transAxes)
            
            # 2. –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
            if revenues and any(r > 0 for r in revenues):
                bars = ax2.bar(segment_names, revenues, color=self.colors[:len(segments)])
                ax2.set_title('–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º', fontweight='bold')
                ax2.set_ylabel('–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞, ‚ÇΩ')
                ax2.tick_params(axis='x', rotation=45)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
                for bar, value in zip(bars, revenues):
                    if value > 0:
                        ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(revenues)*0.01,
                                f'{value:,.0f}‚ÇΩ', ha='center', va='bottom', fontsize=9)
            else:
                ax2.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã—Ä—É—á–∫–µ', 
                        ha='center', va='center', transform=ax2.transAxes)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {e}")
            return self._create_error_chart("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    def create_forecast_chart(self, forecast_data: Dict[str, Any]) -> io.BytesIO:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã—Ä—É—á–∫–∏
        
        Args:
            forecast_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã—Ä—É—á–∫–∏
            
        Returns:
            BytesIO –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞
        """
        try:
            fig, ax = plt.subplots(1, 1, figsize=(12, 7))
            fig.suptitle('üìà –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏', fontsize=16, fontweight='bold')
            
            forecast = forecast_data.get('forecast', [])
            
            if not forecast:
                ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞', 
                       ha='center', va='center', transform=ax.transAxes, fontsize=12)
                ax.set_xticks([])
                ax.set_yticks([])
                
                buf = io.BytesIO()
                plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
                buf.seek(0)
                plt.close()
                return buf
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            months = [f['month_name'] for f in forecast]
            revenues = [f['revenue'] for f in forecast]
            seasonal_coeffs = [f['seasonal_coefficient'] for f in forecast]
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏
            line1 = ax.plot(months, revenues, marker='o', linewidth=3, 
                           markersize=8, color='#4ECDC4', label='–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏')
            
            # –ó–∞–ª–∏–≤–∫–∞ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
            ax.fill_between(months, revenues, alpha=0.3, color='#4ECDC4')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–∫–∏
            for i, (month, revenue) in enumerate(zip(months, revenues)):
                ax.annotate(f'{revenue:,.0f}‚ÇΩ', 
                           (i, revenue), 
                           textcoords="offset points", 
                           xytext=(0,10), 
                           ha='center', 
                           fontsize=10,
                           fontweight='bold')
            
            ax.set_title(f'–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {len(forecast)} –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä—ë–¥', fontweight='bold')
            ax.set_ylabel('–í—ã—Ä—É—á–∫–∞, ‚ÇΩ')
            ax.set_xlabel('–ú–µ—Å—è—Ü')
            ax.tick_params(axis='x', rotation=45)
            ax.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏
            methodology = forecast_data.get('methodology', '')
            if methodology:
                ax.text(0.02, 0.98, f'–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è: {methodology}', 
                       transform=ax.transAxes, fontsize=9, 
                       verticalalignment='top', 
                       bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7))
            
            # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            avg_forecast = sum(revenues) / len(revenues)
            ax.axhline(y=avg_forecast, color='red', linestyle='--', alpha=0.7, 
                      label=f'–°—Ä–µ–¥–Ω–µ–µ: {avg_forecast:,.0f}‚ÇΩ')
            
            ax.legend()
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return self._create_error_chart("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    
    def create_trends_chart(self, daily_data: List[Dict[str, Any]]) -> io.BytesIO:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ (–ª–∏–¥—ã, –∫–ª–∏–µ–Ω—Ç—ã, –≤—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º)
        
        Args:
            daily_data: –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
            
        Returns:
            BytesIO –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞
        """
        try:
            fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 10))
            fig.suptitle('üìä –î–∏–Ω–∞–º–∏–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫', fontsize=16, fontweight='bold')
            
            if not daily_data:
                for ax in [ax1, ax2, ax3]:
                    ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
                           ha='center', va='center', transform=ax.transAxes, fontsize=12)
                    ax.set_xticks([])
                    ax.set_yticks([])
                
                buf = io.BytesIO()
                plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
                buf.seek(0)
                plt.close()
                return buf
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            dates = [datetime.strptime(d['date'], '%Y-%m-%d') for d in daily_data]
            leads = [d.get('new_leads', 0) for d in daily_data]
            clients = [d.get('total_clients', 0) for d in daily_data]
            revenues = [d.get('revenue', 0) for d in daily_data]
            
            # 1. –ì—Ä–∞—Ñ–∏–∫ –ª–∏–¥–æ–≤
            ax1.plot(dates, leads, marker='o', color='#FF6B6B', linewidth=2, markersize=6)
            ax1.set_title('üéØ –ù–æ–≤—ã–µ –ª–∏–¥—ã –ø–æ –¥–Ω—è–º', fontweight='bold')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤')
            ax1.grid(True, alpha=0.3)
            
            # 2. –ì—Ä–∞—Ñ–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
            ax2.plot(dates, clients, marker='s', color='#4ECDC4', linewidth=2, markersize=6)
            ax2.set_title('üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤', fontweight='bold')
            ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤')
            ax2.grid(True, alpha=0.3)
            
            # 3. –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏
            ax3.plot(dates, revenues, marker='^', color='#45B7D1', linewidth=2, markersize=6)
            ax3.set_title('üí∞ –í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º', fontweight='bold')
            ax3.set_ylabel('–í—ã—Ä—É—á–∫–∞, ‚ÇΩ')
            ax3.set_xlabel('–î–∞—Ç–∞')
            ax3.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–∞—Ö
            for ax in [ax1, ax2, ax3]:
                ax.xaxis.set_major_formatter(DateFormatter('%d.%m'))
                ax.tick_params(axis='x', rotation=45)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return self._create_error_chart("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤")
    
    def create_comparison_chart(self, channel1_data: Dict, channel2_data: Dict) -> io.BytesIO:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–≤—É—Ö –∫–∞–Ω–∞–ª–æ–≤
        
        Args:
            channel1_data: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel2_data: –î–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            
        Returns:
            BytesIO –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞
        """
        try:
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
            fig.suptitle('‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤', fontsize=16, fontweight='bold')
            
            channel1_name = channel1_data.get('name', '–ö–∞–Ω–∞–ª 1')
            channel2_name = channel2_data.get('name', '–ö–∞–Ω–∞–ª 2')
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            metrics = ['–í—ã—Ä—É—á–∫–∞', 'ROI (%)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)', 'CAC']
            channel1_values = [
                channel1_data.get('revenue', 0),
                channel1_data.get('roi', 0) * 100,
                channel1_data.get('conversion_rate', 0) * 100,
                channel1_data.get('cac', 0)
            ]
            channel2_values = [
                channel2_data.get('revenue', 0),
                channel2_data.get('roi', 0) * 100,
                channel2_data.get('conversion_rate', 0) * 100,
                channel2_data.get('cac', 0)
            ]
            
            x = np.arange(len(metrics))
            width = 0.35
            
            # –°–æ–∑–¥–∞—ë–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            bars1 = ax1.bar(x - width/2, channel1_values, width, label=channel1_name, color='#FF6B6B')
            bars2 = ax1.bar(x + width/2, channel2_values, width, label=channel2_name, color='#4ECDC4')
            
            ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫', fontweight='bold')
            ax1.set_xticks(x)
            ax1.set_xticklabels(metrics)
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bars, values in [(bars1, channel1_values), (bars2, channel2_values)]:
                for bar, value in zip(bars, values):
                    if value != 0:
                        ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(max(channel1_values), max(channel2_values))*0.01,
                                f'{value:,.0f}', ha='center', va='bottom', fontsize=8)
            
            # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –≤–º–µ—Å—Ç–æ —Ä–∞–¥–∞—Ä–∞
            
            # 2. ROI —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            roi_data = [channel1_data.get('roi', 0) * 100, channel2_data.get('roi', 0) * 100]
            roi_colors = ['green' if x > 0 else 'red' for x in roi_data]
            bars_roi = ax2.bar([channel1_name, channel2_name], roi_data, color=roi_colors)
            ax2.set_title('ROI —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ', fontweight='bold')
            ax2.set_ylabel('ROI, %')
            ax2.axhline(y=0, color='black', linestyle='-', linewidth=0.5)
            
            # 3. –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            conv_data = [channel1_data.get('conversion_rate', 0) * 100, channel2_data.get('conversion_rate', 0) * 100]
            bars_conv = ax3.bar([channel1_name, channel2_name], conv_data, color=['#45B7D1', '#96CEB4'])
            ax3.set_title('–ö–æ–Ω–≤–µ—Ä—Å–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ', fontweight='bold')
            ax3.set_ylabel('–ö–æ–Ω–≤–µ—Ä—Å–∏—è, %')
            
            # 4. CAC —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            cac_data = [channel1_data.get('cac', 0), channel2_data.get('cac', 0)]
            bars_cac = ax4.bar([channel1_name, channel2_name], cac_data, color=['#FECA57', '#FF9FF3'])
            ax4.set_title('CAC —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ', fontweight='bold')
            ax4.set_ylabel('CAC, ‚ÇΩ')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ BytesIO
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return self._create_error_chart("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞")
    
    def _create_error_chart(self, error_message: str) -> io.BytesIO:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ"""
        fig, ax = plt.subplots(1, 1, figsize=(8, 6))
        ax.text(0.5, 0.5, f'‚ùå {error_message}', 
               ha='center', va='center', transform=ax.transAxes, 
               fontsize=14, color='red')
        ax.set_xticks([])
        ax.set_yticks([])
        ax.set_title('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞', fontweight='bold')
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        plt.close()
        
        return buf

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
_visualization_service = None

def get_visualization_service() -> VisualizationService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    global _visualization_service
    if _visualization_service is None:
        _visualization_service = VisualizationService()
    return _visualization_service
