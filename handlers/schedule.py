"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import asyncio
import logging
from datetime import datetime, time
from typing import Dict, Any

from telegram.ext import Application
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from config import ADMIN_IDS, ALERTS_CONFIG, EMOJI, REPORT_CHAT_IDS
from services.analytics import AnalyticsService
from services.reserves_updater import ReservesUpdateService
from utils.formatters import format_currency, format_percentage

logger = logging.getLogger(__name__)

class SchedulerService:
    def __init__(self, application: Application):
        self.application = application
        self.scheduler = AsyncIOScheduler()
        self.analytics = AnalyticsService()
        
    async def hourly_update(self):
        """–ï–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–æ–≤"""
        try:
            logger.info("–í—ã–ø–æ–ª–Ω—è—é –µ–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–æ–≤")
            result = await self.analytics.merge_all_leads()
            
            if result['success'] and result['new_leads'] > 0:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤—ã—Ö –ª–∏–¥–∞—Ö
                message = f"""
{EMOJI['new']} **–ù–û–í–´–ï –õ–ò–î–´**

–î–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏–¥–æ–≤: {result['new_leads']}
–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}
"""
                await self._send_to_admins(message)
                
        except Exception as e:
            logger.error(f"Error in hourly_update: {e}")
    
    async def hourly_reserves_update(self):
        """–ï–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤ RestoPlace"""
        try:
            logger.info("–í—ã–ø–æ–ª–Ω—è—é –µ–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤ RestoPlace")
            
            updater = ReservesUpdateService()
            stats = await updater.update_reserves_data()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –≤ —á–∞—Ç –æ—Ç—á—ë—Ç–æ–≤, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if not stats.get('error') and (stats.get('reserves_updated', 0) > 0 or stats.get('guests_updated', 0) > 0):
                brief_message = f"""
{EMOJI['update']} **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RestoPlace**

üìä –†–µ–∑–µ—Ä–≤–æ–≤: {stats.get('reserves_updated', 0)}
üë• –ì–æ—Å—Ç–µ–π: {stats.get('guests_updated', 0)}
‚è∞ {datetime.now().strftime('%H:%M')}
"""
                await self._send_to_report_chats(brief_message)
            elif stats.get('error'):
                error_message = f"""
{EMOJI['error']} **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RestoPlace**

{stats['error']}
‚è∞ {datetime.now().strftime('%H:%M')}
"""
                await self._send_to_admins(error_message)
                
        except Exception as e:
            logger.error(f"Error in hourly_reserves_update: {e}")
    
    async def daily_report(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 9:00"""
        try:
            logger.info("–§–æ—Ä–º–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç")
            
            # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            await self.analytics.merge_all_leads()
            await self.analytics.update_all_dashboards()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
            report_data = await self.analytics.generate_daily_report()
            
            if not report_data:
                return
            
            today = datetime.now().strftime("%d.%m.%Y")
            
            report_text = f"""
{EMOJI['report']} **–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢**
–î–∞—Ç–∞: {today}

{EMOJI['users']} –ù–æ–≤—ã—Ö –ª–∏–¥–æ–≤: {report_data['new_leads']}
{EMOJI['chart_up']} –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {format_percentage(report_data['conversion'])}
{EMOJI['money']} –í—ã—Ä—É—á–∫–∞: {format_currency(report_data['revenue'])}
{EMOJI['chart_up']} ROI: {format_percentage(report_data['roi'])}

{EMOJI['top']} **–¢–û–ü-3 –ö–ê–ù–ê–õ–ê:**
"""
            
            for i, channel in enumerate(report_data['top_channels'][:3], 1):
                roi_emoji = EMOJI['chart_up'] if channel['roi'] > 0 else EMOJI['chart_down']
                report_text += f"{i}. {channel['name']}: {format_currency(channel['revenue'])} (ROI: {roi_emoji}{format_percentage(channel['roi'])})\n"
            
            if report_data['alerts']:
                report_text += f"\n{EMOJI['warning']} **–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:**\n"
                for alert in report_data['alerts']:
                    report_text += f"‚Ä¢ {alert}\n"
            
            await self._send_to_admins(report_text)
            
        except Exception as e:
            logger.error(f"Error in daily_report: {e}")
    
    async def weekly_report(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º"""
        try:
            logger.info("–§–æ—Ä–º–∏—Ä—É—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç")
            
            weekly_data = await self.analytics.generate_weekly_report()
            
            if not weekly_data:
                return
            
            report_text = f"""
{EMOJI['calendar']} **–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–Å–¢**
–ü–µ—Ä–∏–æ–¥: {weekly_data['period']}

{EMOJI['chart_up']} **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –õ–∏–¥—ã: {weekly_data['leads']} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {format_percentage(weekly_data['leads_change'])})
‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã: {weekly_data['clients']} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {format_percentage(weekly_data['clients_change'])})
‚Ä¢ –í—ã—Ä—É—á–∫–∞: {format_currency(weekly_data['revenue'])} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {format_percentage(weekly_data['revenue_change'])})
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {format_percentage(weekly_data['conversion'])}

{EMOJI['top']} **–õ—É—á—à–∏–π –∫–∞–Ω–∞–ª –Ω–µ–¥–µ–ª–∏:** {weekly_data['best_channel']}
{EMOJI['new']} **–ù–æ–≤—ã—Ö VIP –∫–ª–∏–µ–Ω—Ç–æ–≤:** {weekly_data['new_vip']}

{EMOJI['fire']} **–¶–µ–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:**
‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –¥–æ {format_percentage(weekly_data['conversion_target'])}
‚Ä¢ –î–æ—Å—Ç–∏—á—å –≤—ã—Ä—É—á–∫–∏ {format_currency(weekly_data['revenue_target'])}
"""
            
            await self._send_to_admins(report_text)
            
        except Exception as e:
            logger.error(f"Error in weekly_report: {e}")
    
    async def monthly_report(self):
        """–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞"""
        try:
            logger.info("–§–æ—Ä–º–∏—Ä—É—é –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç")
            
            monthly_data = await self.analytics.generate_monthly_report()
            
            if not monthly_data:
                return
            
            report_text = f"""
{EMOJI['calendar']} **–ï–ñ–ï–ú–ï–°–Ø–ß–ù–´–ô –û–¢–ß–Å–¢**
–ú–µ—Å—è—Ü: {monthly_data['month']}

{EMOJI['money']} **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {format_currency(monthly_data['total_revenue'])}
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥: {format_currency(monthly_data['marketing_costs'])}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {format_currency(monthly_data['profit'])}
‚Ä¢ ROI: {format_percentage(monthly_data['roi'])}

{EMOJI['users']} **–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {monthly_data['new_clients']}
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {monthly_data['returning_clients']}
‚Ä¢ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤: {monthly_data['vip_clients']}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π LTV: {format_currency(monthly_data['avg_ltv'])}

{EMOJI['chart_up']} **–õ—É—á—à–∏–µ –∫–∞–Ω–∞–ª—ã –º–µ—Å—è—Ü–∞:**
"""
            
            for i, channel in enumerate(monthly_data['top_channels'][:5], 1):
                report_text += f"{i}. {channel['name']}: ROI {format_percentage(channel['roi'])}\n"
            
            await self._send_to_admins(report_text)
            
        except Exception as e:
            logger.error(f"Error in monthly_report: {e}")
    
    async def check_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            alerts = await self.analytics.check_alerts()
            
            for alert in alerts:
                if alert['type'] == 'new_vip':
                    message = f"""
{EMOJI['crown']} **–ù–û–í–´–ô VIP –ö–õ–ò–ï–ù–¢!**

–ö–ª–∏–µ–Ω—Ç: {alert['client_name']}
–ö–∞–Ω–∞–ª: {alert['channel']}
–í—ã—Ä—É—á–∫–∞: {format_currency(alert['revenue'])}
–í–∏–∑–∏—Ç—ã: {alert['visits']}
"""
                    await self._send_to_admins(message)
                
                elif alert['type'] == 'conversion_drop':
                    message = f"""
{EMOJI['warning']} **–°–ù–ò–ñ–ï–ù–ò–ï –ö–û–ù–í–ï–†–°–ò–ò**

–ö–∞–Ω–∞–ª: {alert['channel']}
–¢–µ–∫—É—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: {format_percentage(alert['current_conversion'])}
–°–Ω–∏–∂–µ–Ω–∏–µ: {format_percentage(alert['drop_percentage'])}

–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
"""
                    await self._send_to_admins(message)
                
                elif alert['type'] == 'roi_critical':
                    message = f"""
{EMOJI['chart_down']} **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô ROI**

–ö–∞–Ω–∞–ª: {alert['channel']}
ROI: {format_percentage(alert['roi'])}
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –±—é–¥–∂–µ—Ç –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
"""
                    await self._send_to_admins(message)
                
        except Exception as e:
            logger.error(f"Error in check_alerts: {e}")
    
    async def _send_to_admins(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        for admin_id in ADMIN_IDS:
            try:
                await self.application.bot.send_message(
                    chat_id=admin_id,
                    text=message,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Failed to send message to admin {admin_id}: {e}")
    
    async def _send_to_report_chats(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç—ã –æ—Ç—á—ë—Ç–æ–≤"""
        for chat_id in REPORT_CHAT_IDS:
            try:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Failed to send message to report chat {chat_id}: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ï–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–æ–≤
            self.scheduler.add_job(
                self.hourly_update,
                trigger=IntervalTrigger(hours=1),
                id='hourly_update',
                name='–ï–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–æ–≤'
            )
            
            # –ï–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤ RestoPlace
            self.scheduler.add_job(
                self.hourly_reserves_update,
                trigger=IntervalTrigger(hours=1),
                id='hourly_reserves_update',
                name='–ï–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤ RestoPlace'
            )
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 9:00 –ú–°–ö
            self.scheduler.add_job(
                self.daily_report,
                trigger=CronTrigger(hour=9, minute=0, timezone='Europe/Moscow'),
                id='daily_report',
                name='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç'
            )
            
            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 10:00
            self.scheduler.add_job(
                self.weekly_report,
                trigger=CronTrigger(day_of_week=0, hour=10, minute=0, timezone='Europe/Moscow'),
                id='weekly_report',
                name='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç'
            )
            
            # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 11:00
            self.scheduler.add_job(
                self.monthly_report,
                trigger=CronTrigger(day=1, hour=11, minute=0, timezone='Europe/Moscow'),
                id='monthly_report',
                name='–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç'
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            self.scheduler.add_job(
                self.check_alerts,
                trigger=IntervalTrigger(minutes=15),
                id='check_alerts',
                name='–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
            )
            
            self.scheduler.start()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"Error starting scheduler: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def setup_scheduler(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler_service = SchedulerService(application)
    scheduler_service.start()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    application.bot_data['scheduler'] = scheduler_service
    
    return scheduler_service
