"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞
"""

import asyncio
import logging
from datetime import datetime, timedelta
from telegram import Update, InputFile
from telegram.ext import ContextTypes

from config import EMOJI, ADMIN_IDS
from services.analytics import AnalyticsService
from services.reserves_updater import ReservesUpdateService
from services.visualization import get_visualization_service
from utils.formatters import format_number, format_percentage, format_currency
from utils.rate_limiter import rate_limit, admin_rate_limit

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
alerts_enabled = {}

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    from handlers.keyboards import get_main_menu
    
    user = update.effective_user
    welcome_text = f"""
üé§ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ï–≤–≥–µ–Ω–∏—á –°–ü–ë"!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –∫–∞—Ä–∞–æ–∫–µ-—Ä—é–º–æ—á–Ω–æ–π.

‚ú® **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
‚Ä¢ üìà –°–æ–∑–¥–∞—é –∫—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
‚Ä¢ üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è  
‚Ä¢ üë• –°–µ–≥–º–µ–Ω—Ç–∏—Ä—É—é –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ üí∞ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é –≤—ã—Ä—É—á–∫—É
‚Ä¢ üîî –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üéµ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏**

–°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∫–∞—Ä–∞–æ–∫–µ-–±–∏–∑–Ω–µ—Å–∞ –∏ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É —Ä–µ–∫–ª–∞–º—É!
"""
    
    await update.message.reply_text(
        welcome_text, 
        parse_mode='Markdown',
        reply_markup=get_main_menu()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = f"""
{EMOJI['info']} **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ "–ï–≤–≥–µ–Ω–∏—á –°–ü–ë"**

{EMOJI['report']} **–û—Ç—á—ë—Ç—ã:**
‚Ä¢ `/report` - –∫—Ä–∞—Ç–∫–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
‚Ä¢ `/channels` - –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ `/channels_chart` - –≥—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ `/channel <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
‚Ä¢ `/segments` - —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ `/segments_chart` - –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ `/managers` - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
‚Ä¢ `/reserves` - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö RestoPlace (–∞–¥–º–∏–Ω—ã)

{EMOJI['chart_up']} **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:**
‚Ä¢ `/forecast` - –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
‚Ä¢ `/compare –∫–∞–Ω–∞–ª1 –∫–∞–Ω–∞–ª2` - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (–∞–¥–º–∏–Ω—ã)
‚Ä¢ `/test_metrika` - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏ (–∞–¥–º–∏–Ω—ã)

‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/update` - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
‚Ä¢ `/alerts on/off` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

{EMOJI['calendar']} **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ï–∂–µ—á–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 9:00 –ú–°–ö
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö VIP-–∫–ª–∏–µ–Ω—Ç–∞—Ö
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π

{EMOJI['info']} **–ú–µ—Ç—Ä–∏–∫–∏:**
‚Ä¢ CAC - —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
‚Ä¢ LTV - –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
‚Ä¢ ROI - –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è - –ø—Ä–æ—Ü–µ–Ω—Ç –ª–∏–¥–æ–≤ –≤ –∫–ª–∏–µ–Ω—Ç—ã

üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
–ö–æ–º–∞–Ω–¥—ã –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /report - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await update.message.reply_text(f"{EMOJI['clock']} –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç...")
        
        analytics = AnalyticsService()
        visualization = get_visualization_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞
        report_data = await analytics.generate_daily_report()
        
        if not report_data:
            await loading_msg.edit_text(f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
        today = datetime.now().strftime("%d.%m.%Y")
        
        report_text = f"""
{EMOJI['report']} **–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢**
–î–∞—Ç–∞: {today}

{EMOJI['users']} –ù–æ–≤—ã—Ö –ª–∏–¥–æ–≤: {report_data['new_leads']}
{EMOJI['chart_up']} –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {format_percentage(report_data['conversion'])}
{EMOJI['money']} –í—ã—Ä—É—á–∫–∞: {format_currency(report_data['revenue'])}
{EMOJI['chart_up']} ROI: {format_percentage(report_data['roi'])}

{EMOJI['top']} **–¢–û–ü-3 –ö–ê–ù–ê–õ–ê:**
"""
        
        for i, channel in enumerate(report_data['top_channels'][:3], 1):
            roi_emoji = EMOJI['chart_up'] if channel['roi'] > 0 else EMOJI['chart_down']
            report_text += f"{i}. {channel['name']}: {format_currency(channel['revenue'])} (ROI: {roi_emoji}{format_percentage(channel['roi'])})\n"
        
        if report_data['alerts']:
            report_text += f"\n{EMOJI['warning']} **–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:**\n"
            for alert in report_data['alerts']:
                report_text += f"‚Ä¢ {alert}\n"
        
        report_text += f"\nüìä –ì—Ä–∞—Ñ–∏–∫ –∫–∞–Ω–∞–ª–æ–≤: /channels_chart"
        report_text += f"\nüë• –°–µ–≥–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤: /segments"
        
        await loading_msg.edit_text(report_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in report_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")

async def channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /channels - –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        await update.message.reply_text(f"{EMOJI['clock']} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–Ω–∞–ª—ã...")
        
        analytics = AnalyticsService()
        channels_data = await analytics.analyze_channels()
        
        if not channels_data:
            await update.message.reply_text(f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º")
            return
        
        report_text = f"{EMOJI['chart_up']} **–ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–û–í –ü–†–ò–í–õ–ï–ß–ï–ù–ò–Ø**\n\n"
        
        for channel in channels_data:
            roi_stars = "‚òÖ" * max(1, min(5, int(channel['rating'])))
            roi_emoji = EMOJI['chart_up'] if channel['roi'] > 0 else EMOJI['chart_down']
            
            report_text += f"**{channel['name']}** {roi_stars}\n"
            report_text += f"‚Ä¢ –õ–∏–¥—ã: {channel['leads']} | –ö–ª–∏–µ–Ω—Ç—ã: {channel['clients']}\n"
            report_text += f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {format_percentage(channel['conversion'])}\n"
            report_text += f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {format_currency(channel['revenue'])}\n"
            report_text += f"‚Ä¢ CAC: {format_currency(channel['cac'])} | LTV: {format_currency(channel['ltv'])}\n"
            report_text += f"‚Ä¢ ROI: {roi_emoji}{format_percentage(channel['roi'])}\n\n"
        
        report_text += f"–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: `/channel <–Ω–∞–∑–≤–∞–Ω–∏–µ>`"
        
        await update.message.reply_text(report_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in channels_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–æ–≤")

async def channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /channel <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞. –ü—Ä–∏–º–µ—Ä: `/channel Yandex`", parse_mode='Markdown')
        return
    
    channel_name = ' '.join(context.args)
    
    try:
        analytics = AnalyticsService()
        channel_data = await analytics.analyze_channel(channel_name)
        
        if not channel_data:
            await update.message.reply_text(f"{EMOJI['error']} –ö–∞–Ω–∞–ª '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        roi_emoji = EMOJI['chart_up'] if channel_data['roi'] > 0 else EMOJI['chart_down']
        rating_stars = "‚òÖ" * max(1, min(5, int(channel_data['rating'])))
        
        report_text = f"""
{EMOJI['chart_up']} **–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê: {channel_name}**

{EMOJI['star']} –†–µ–π—Ç–∏–Ω–≥: {rating_stars} ({channel_data['rating']:.1f}/5)

{EMOJI['users']} **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: {channel_data['total_leads']}
‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã: {channel_data['clients']} ({format_percentage(channel_data['conversion'])})
‚Ä¢ –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {channel_data['new_clients']}
‚Ä¢ VIP –∫–ª–∏–µ–Ω—Ç—ã: {channel_data['vip_clients']}

{EMOJI['money']} **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {format_currency(channel_data['revenue'])}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_currency(channel_data['avg_check'])}
‚Ä¢ CAC: {format_currency(channel_data['cac'])}
‚Ä¢ LTV: {format_currency(channel_data['ltv'])}
‚Ä¢ ROI: {roi_emoji}{format_percentage(channel_data['roi'])}

{EMOJI['calendar']} **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {channel_data['payback_visits']} –≤–∏–∑–∏—Ç–æ–≤
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {channel_data['last_activity']}
"""
        
        if channel_data['metrika_data']:
            metrika = channel_data['metrika_data']
            report_text += f"""
{EMOJI['chart_up']} **–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞:**
‚Ä¢ –í–∏–∑–∏—Ç—ã: {metrika['visits']}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {metrika['pageviews']}
‚Ä¢ –û—Ç–∫–∞–∑—ã: {format_percentage(metrika['bounce_rate'])}
‚Ä¢ –í—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ: {metrika['avg_duration']}—Å
"""
        
        await update.message.reply_text(report_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in channel_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω–∞–ª–∞")

async def segments_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /segments - —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        await update.message.reply_text(f"{EMOJI['clock']} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–µ–≥–º–µ–Ω—Ç—ã...")
        
        analytics = AnalyticsService()
        segments_data = await analytics.analyze_segments()
        
        if not segments_data:
            await update.message.reply_text(f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
            return
        
        report_text = f"{EMOJI['users']} **–°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í**\n\n"
        
        total_clients = sum(segment['count'] for segment in segments_data)
        total_revenue = sum(segment['revenue'] for segment in segments_data)
        
        for segment in segments_data:
            emoji = segment['emoji']
            percentage = (segment['count'] / total_clients * 100) if total_clients > 0 else 0
            revenue_share = (segment['revenue'] / total_revenue * 100) if total_revenue > 0 else 0
            
            report_text += f"{emoji} **{segment['name']}** ({format_percentage(percentage/100)})\n"
            report_text += f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã: {segment['count']}\n"
            report_text += f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {format_currency(segment['revenue'])} ({format_percentage(revenue_share/100)})\n"
            report_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_currency(segment['avg_check'])}\n"
            report_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤–∏–∑–∏—Ç–æ–≤: {segment['avg_visits']:.1f}\n\n"
        
        report_text += f"**–ò–¢–û–ì–û:**\n"
        report_text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n"
        report_text += f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {format_currency(total_revenue)}"
        
        await update.message.reply_text(report_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in segments_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

async def managers_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /managers - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    try:
        await update.message.reply_text(f"{EMOJI['clock']} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
        
        analytics = AnalyticsService()
        managers_data = await analytics.analyze_managers()
        
        if not managers_data:
            await update.message.reply_text(f"{EMOJI['info']} –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        
        report_text = f"{EMOJI['users']} **–≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ú–ï–ù–ï–î–ñ–ï–†–û–í**\n\n"
        
        for manager in managers_data:
            report_text += f"**{manager['name']}**\n"
            report_text += f"‚Ä¢ –õ–∏–¥—ã: {manager['leads']} | –ö–ª–∏–µ–Ω—Ç—ã: {manager['clients']}\n"
            report_text += f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {format_percentage(manager['conversion'])}\n"
            report_text += f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {format_currency(manager['revenue'])}\n"
            report_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_currency(manager['avg_check'])}\n\n"
        
        await update.message.reply_text(report_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in managers_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")

async def update_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /update - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    try:
        await update.message.reply_text(f"{EMOJI['clock']} –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
        
        analytics = AnalyticsService()
        result = await analytics.merge_all_leads()
        
        if result['success']:
            report_text = f"""
{EMOJI['success']} **–î–ê–ù–ù–´–ï –û–ë–ù–û–í–õ–ï–ù–´**

‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏–¥–æ–≤ —Å —Å–∞–π—Ç–∞: {result['site_leads']}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏–¥–æ–≤ –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π: {result['social_leads']}
‚Ä¢ –ù–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {result['new_leads']}
‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {result['duplicates']}
‚Ä¢ –û–±–æ–≥–∞—â–µ–Ω–æ –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {result['enriched']}

–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}
"""
        else:
            report_text = f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {result['error']}"
        
        await update.message.reply_text(report_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in update_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def forecast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /forecast - –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    try:
        await update.message.reply_text(f"{EMOJI['clock']} –°—Ç—Ä–æ—é –ø—Ä–æ–≥–Ω–æ–∑...")
        
        analytics = AnalyticsService()
        forecast_data = await analytics.generate_forecast()
        
        if not forecast_data:
            await update.message.reply_text(f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
            return
        
        report_text = f"""
{EMOJI['chart_up']} **–ü–†–û–ì–ù–û–ó –í–´–†–£–ß–ö–ò –ù–ê 3 –ú–ï–°–Ø–¶–ê**

{EMOJI['calendar']} **–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü:**
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: {format_currency(forecast_data['month_1'])}
‚Ä¢ –†–æ—Å—Ç –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É: {format_percentage(forecast_data['growth_1'])}

{EMOJI['calendar']} **–ß–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞:**
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: {format_currency(forecast_data['month_2'])}
‚Ä¢ –†–æ—Å—Ç –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É: {format_percentage(forecast_data['growth_2'])}

{EMOJI['calendar']} **–ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞:**
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: {format_currency(forecast_data['month_3'])}
‚Ä¢ –†–æ—Å—Ç –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É: {format_percentage(forecast_data['growth_3'])}

{EMOJI['info']} –ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
"""
        
        await update.message.reply_text(report_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in forecast_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")

async def alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /alerts on/off - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    global alerts_enabled
    
    user_id = update.effective_user.id
    
    if not context.args or context.args[0].lower() not in ['on', 'off']:
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if alerts_enabled.get(user_id, True) else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å {status}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/alerts on` –∏–ª–∏ `/alerts off`", parse_mode='Markdown')
        return
    
    action = context.args[0].lower()
    
    if action == 'on':
        alerts_enabled[user_id] = True
        await update.message.reply_text(f"{EMOJI['success']} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    else:
        alerts_enabled[user_id] = False
        await update.message.reply_text(f"{EMOJI['info']} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")

async def test_metrika_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /test_metrika - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–æ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    try:
        await update.message.reply_text(f"{EMOJI['clock']} –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–æ–π...")
        
        from services.metrika import MetrikaService
        metrika = MetrikaService()
        
        test_result = await metrika.test_connection()
        
        if test_result['success']:
            report_text = f"""
{EMOJI['success']} **–°–û–ï–î–ò–ù–ï–ù–ò–ï –° –Ø–ù–î–ï–ö–°.–ú–ï–¢–†–ò–ö–û–ô –£–°–ü–ï–®–ù–û**

‚Ä¢ –°—á—ë—Ç—á–∏–∫: {test_result['counter_id']}
‚Ä¢ –í–∏–∑–∏—Ç—ã –∑–∞ –≤—á–µ—Ä–∞: {test_result['yesterday_visits']}
‚Ä¢ –°—Ç–∞—Ç—É—Å API: –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {test_result['response_time']}–º—Å
"""
        else:
            report_text = f"{EMOJI['error']} **–û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø**\n\n{test_result['error']}"
        
        await update.message.reply_text(report_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in test_metrika_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏")

async def test_google_sheets_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /test_sheets - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Sheets (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    try:
        await update.message.reply_text(f"{EMOJI['clock']} –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google Sheets...")
        
        from services.google_sheets import GoogleSheetsService
        sheets = GoogleSheetsService()
        
        test_result = sheets.test_connection()
        
        if test_result['success']:
            worksheets_info = ""
            if test_result.get('worksheets'):
                worksheets_info = f"‚Ä¢ –õ–∏—Å—Ç—ã: {', '.join(test_result['worksheets'])}"
                if test_result['worksheets_count'] > 5:
                    worksheets_info += f" (–∏ –µ—â—ë {test_result['worksheets_count'] - 5})"
            
            report_text = f"""
{EMOJI['success']} **GOOGLE SHEETS –ü–û–î–ö–õ–Æ–ß–ï–ù**

‚Ä¢ –¢–∞–±–ª–∏—Ü–∞: {test_result.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ ID: {test_result['spreadsheet_id'][:20]}...
‚Ä¢ –õ–∏—Å—Ç–æ–≤: {test_result['worksheets_count']}
{worksheets_info}
‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {test_result['authentication']}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {test_result['access_level']}
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {test_result['response_time']}–º—Å
"""
        else:
            report_text = f"""
{EMOJI['warning']} **GOOGLE SHEETS –ù–ï–î–û–°–¢–£–ü–ï–ù**

‚Ä¢ –û—à–∏–±–∫–∞: {test_result['error']}
‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {test_result.get('authentication', '–Ω–µ—Ç')}
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ fallback
‚Ä¢ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {test_result['response_time']}–º—Å

üí° –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ GOOGLE_CREDENTIALS_JSON
"""
        
        await update.message.reply_text(report_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in test_google_sheets_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Google Sheets")

async def test_all_connections_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /test_all - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    try:
        await update.message.reply_text(f"{EMOJI['clock']} –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
        results = {}
        
        # Google Sheets
        from services.google_sheets import GoogleSheetsService
        sheets = GoogleSheetsService()
        results['sheets'] = sheets.test_connection()
        
        # Yandex Metrika
        from services.metrika import MetrikaService
        metrika = MetrikaService()
        results['metrika'] = await metrika.test_connection()
        
        # PostgreSQL
        from services.database import DatabaseService
        try:
            db = DatabaseService()
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            test_query = "SELECT 1 as test"
            db_result = await db.execute_query(test_query)
            results['postgres'] = {
                'success': True,
                'service': 'PostgreSQL',
                'status': '–ü–æ–¥–∫–ª—é—á–µ–Ω',
                'tables_count': 'N/A'
            }
        except Exception as e:
            results['postgres'] = {
                'success': False,
                'service': 'PostgreSQL', 
                'error': str(e)
            }
        
        # Redis
        from services.cache import CacheService
        try:
            cache = CacheService()
            await cache.set('test_connection', 'ok', 10)
            test_val = await cache.get('test_connection')
            results['redis'] = {
                'success': test_val == 'ok',
                'service': 'Redis',
                'status': '–ü–æ–¥–∫–ª—é—á–µ–Ω' if test_val == 'ok' else '–û—à–∏–±–∫–∞'
            }
        except Exception as e:
            results['redis'] = {
                'success': False,
                'service': 'Redis',
                'error': str(e)
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report_lines = [f"{EMOJI['gear']} **–°–¢–ê–¢–£–° –í–°–ï–• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô**\n"]
        
        for service_key, result in results.items():
            service_name = result['service']
            if result['success']:
                status_emoji = EMOJI['success']
                status_text = "–†–∞–±–æ—Ç–∞–µ—Ç"
                if service_key == 'metrika' and 'yesterday_visits' in result:
                    details = f"({result['yesterday_visits']} –≤–∏–∑–∏—Ç–æ–≤ –≤—á–µ—Ä–∞)"
                elif service_key == 'sheets' and 'worksheets_count' in result:
                    details = f"({result['worksheets_count']} –ª–∏—Å—Ç–æ–≤)"
                else:
                    details = ""
            else:
                status_emoji = EMOJI['error'] 
                status_text = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                details = f"({result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')[:50]}...)"
            
            report_lines.append(f"{status_emoji} **{service_name}**: {status_text} {details}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        working_count = sum(1 for r in results.values() if r['success'])
        total_count = len(results)
        
        report_lines.append(f"\nüìä **–ò—Ç–æ–≥–æ**: {working_count}/{total_count} —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        if working_count == total_count:
            report_lines.append(f"{EMOJI['party']} –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
        elif working_count > 0:
            report_lines.append(f"{EMOJI['warning']} –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
        else:
            report_lines.append(f"{EMOJI['error']} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        
        report_text = '\n'.join(report_lines)
        await update.message.reply_text(report_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in test_all_connections_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")

async def reserves_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /reserves - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö RestoPlace (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        await update.message.reply_text(f"{EMOJI['error']} –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    try:
        await update.message.reply_text(f"{EMOJI['clock']} –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–æ–≤ –∏–∑ RestoPlace...")
        
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updater = ReservesUpdateService()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        stats = await updater.update_reserves_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
        summary = updater.get_update_summary(stats)
        await update.message.reply_text(summary, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in reserves_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–æ–≤: {str(e)}")

async def auto_reserves_update():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤ RestoPlace")
        
        updater = ReservesUpdateService()
        stats = await updater.update_reserves_data()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –≤ —á–∞—Ç –æ—Ç—á—ë—Ç–æ–≤
        summary = updater.get_update_summary(stats)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from config import REPORT_CHAT_IDS
        
        if REPORT_CHAT_IDS:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—ã–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
            # TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ bot instance
            logger.info(f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {stats}")
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤: {e}")
        return {'error': str(e)}

@rate_limit
async def channels_chart_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /channels_chart - –≥—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        loading_msg = await update.message.reply_text(f"{EMOJI['clock']} –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –∫–∞–Ω–∞–ª–æ–≤...")
        
        analytics = AnalyticsService()
        visualization = get_visualization_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤
        channels_data = await analytics.analyze_channels()
        
        if not channels_data:
            await loading_msg.edit_text(f"{EMOJI['error']} –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return
        
        # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
        chart_buffer = visualization.create_channel_performance_chart(channels_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await update.message.reply_photo(
            photo=InputFile(chart_buffer, filename="channels_chart.png"),
            caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /channels"
        )
        
        await loading_msg.delete()
        
    except Exception as e:
        logger.error(f"Error in channels_chart_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")

@rate_limit
async def segments_chart_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /segments_chart - –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        loading_msg = await update.message.reply_text(f"{EMOJI['clock']} –°–æ–∑–¥–∞—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å–µ–≥–º–µ–Ω—Ç–æ–≤...")
        
        analytics = AnalyticsService()
        visualization = get_visualization_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        segments_data = await analytics.analyze_segments()
        
        if not segments_data:
            await loading_msg.edit_text(f"{EMOJI['error']} –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã")
            return
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–≥—Ä–∞–º–º—É
        chart_buffer = visualization.create_segments_pie_chart(segments_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        await update.message.reply_photo(
            photo=InputFile(chart_buffer, filename="segments_chart.png"),
            caption=f"üë• –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /segments"
        )
        
        await loading_msg.delete()
        
    except Exception as e:
        logger.error(f"Error in segments_chart_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

@rate_limit
async def forecast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /forecast - –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏"""
    try:
        loading_msg = await update.message.reply_text(f"{EMOJI['clock']} –°–æ–∑–¥–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏...")
        
        analytics = AnalyticsService()
        visualization = get_visualization_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –º–µ—Å—è—Ü–∞
        forecast_data = await analytics.forecast_revenue(3)
        
        if not forecast_data:
            await loading_msg.edit_text(f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
            return
        
        # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
        chart_buffer = visualization.create_forecast_chart(forecast_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
        total_forecast = forecast_data.get('total_forecast', 0)
        historical_avg = forecast_data.get('historical_avg', 0)
        
        forecast_text = f"""
üìà **–ü–†–û–ì–ù–û–ó –í–´–†–£–ß–ö–ò –ù–ê 3 –ú–ï–°–Ø–¶–ê**

üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: {format_currency(total_forecast)}
üìä –°—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω–∞—è (–ø—Ä–æ–≥–Ω–æ–∑): {format_currency(total_forecast/3)}
üìã –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å—Ä–µ–¥–Ω—è—è: {format_currency(historical_avg)}

üîÆ **–ü–æ –º–µ—Å—è—Ü–∞–º:**
"""
        
        for month_data in forecast_data.get('forecast', []):
            seasonal_emoji = "üî•" if month_data['seasonal_coefficient'] > 1.1 else "‚ùÑÔ∏è" if month_data['seasonal_coefficient'] < 0.9 else "üåü"
            forecast_text += f"{seasonal_emoji} {month_data['month_name']}: {format_currency(month_data['revenue'])}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ —Ç–µ–∫—Å—Ç
        await update.message.reply_photo(
            photo=InputFile(chart_buffer, filename="forecast_chart.png"),
            caption=forecast_text,
            parse_mode='Markdown'
        )
        
        await loading_msg.delete()
        
    except Exception as e:
        logger.error(f"Error in forecast_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")

@rate_limit
async def compare_channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /compare - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                f"{EMOJI['info']} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/compare –∫–∞–Ω–∞–ª1 –∫–∞–Ω–∞–ª2`\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/compare Instagram –í–ö–æ–Ω—Ç–∞–∫—Ç–µ`",
                parse_mode='Markdown'
            )
            return
        
        channel1_name = context.args[0]
        channel2_name = context.args[1]
        
        loading_msg = await update.message.reply_text(f"{EMOJI['clock']} –°—Ä–∞–≤–Ω–∏–≤–∞—é –∫–∞–Ω–∞–ª—ã...")
        
        analytics = AnalyticsService()
        visualization = get_visualization_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤
        channel1_data = await analytics.analyze_channel(channel1_name)
        channel2_data = await analytics.analyze_channel(channel2_name)
        
        if not channel1_data:
            await loading_msg.edit_text(f"{EMOJI['error']} –ö–∞–Ω–∞–ª '{channel1_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if not channel2_data:
            await loading_msg.edit_text(f"{EMOJI['error']} –ö–∞–Ω–∞–ª '{channel2_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        chart_buffer = visualization.create_comparison_chart(channel1_data, channel2_data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        score1 = (channel1_data.get('rating', 0) + 
                 (1 if channel1_data.get('roi', 0) > channel2_data.get('roi', 0) else 0) +
                 (1 if channel1_data.get('conversion_rate', 0) > channel2_data.get('conversion_rate', 0) else 0))
        
        score2 = (channel2_data.get('rating', 0) + 
                 (1 if channel2_data.get('roi', 0) > channel1_data.get('roi', 0) else 0) +
                 (1 if channel2_data.get('conversion_rate', 0) > channel1_data.get('conversion_rate', 0) else 0))
        
        winner = channel1_name if score1 > score2 else channel2_name if score2 > score1 else "–ù–∏—á—å—è"
        winner_emoji = "ü•á" if winner != "–ù–∏—á—å—è" else "ü§ù"
        
        comparison_text = f"""
‚öñÔ∏è **–°–†–ê–í–ù–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–í**

ü•ä {channel1_name} vs {channel2_name}

{winner_emoji} **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}**

üìä **–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –≥—Ä–∞—Ñ–∏–∫–µ –≤—ã—à–µ**
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_photo(
            photo=InputFile(chart_buffer, filename="comparison_chart.png"),
            caption=comparison_text,
            parse_mode='Markdown'
        )
        
        await loading_msg.delete()
        
    except Exception as e:
        logger.error(f"Error in compare_channels_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤")

@admin_rate_limit  
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text(f"{EMOJI['error']} –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        from services.database import get_db_service
        from config import USE_POSTGRES, REDIS_URL
        
        status_text = f"""
üîß **–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´**

üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ PostgreSQL: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if USE_POSTGRES else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}

üóÑÔ∏è **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ Redis: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if REDIS_URL else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

‚ö° **–°–µ—Ä–≤–∏—Å—ã:**
‚Ä¢ Analytics Service: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ Visualization Service: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ Rate Limiter: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω

üìà **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if USE_POSTGRES:
            try:
                db_service = await get_db_service()
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                test_query = "SELECT 1"
                await db_service.pool.fetchval(test_query)
                status_text += "\n‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: OK"
            except Exception as e:
                status_text += f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {str(e)[:50]}"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in status_command: {e}")
        await update.message.reply_text(f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
