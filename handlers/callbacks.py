"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes

from config import EMOJI, ADMIN_IDS
from handlers.keyboards import (
    get_main_menu, get_reports_menu, get_analytics_menu, 
    get_channels_menu, get_segments_menu, get_admin_menu, 
    get_help_menu, get_quick_actions, get_period_menu
)
from handlers.commands import (
    report_command, channels_command, segments_command, 
    managers_command, update_command, forecast_command,
    alerts_command, reserves_command, channels_chart_command,
    segments_chart_command, compare_channels_command,
    status_command, test_metrika_command, test_google_sheets_command,
    test_all_connections_command
)

logger = logging.getLogger(__name__)

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    try:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            await query.edit_message_text(
                text="üé§ **–ö–∞—Ä–∞–æ–∫–µ-—Ä—é–º–æ—á–Ω–∞—è '–ï–≤–≥–µ–Ω–∏—á –°–ü–ë'**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                parse_mode='Markdown',
                reply_markup=get_main_menu()
            )
            
        # === –û–¢–ß–Å–¢–´ ===
        elif data == "reports_menu":
            await query.edit_message_text(
                text="üìä **–û–¢–ß–Å–¢–´**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
                parse_mode='Markdown',
                reply_markup=get_reports_menu()
            )
            
        elif data == "report_daily":
            await query.edit_message_text("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç...")
            # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π Update –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda self, text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await report_command(fake_update, context)
            
        elif data == "report_forecast":
            await query.edit_message_text("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda self, text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await forecast_command(fake_update, context)
            
        elif data == "report_compare":
            await query.edit_message_text("‚öñÔ∏è –°—Ä–∞–≤–Ω–∏–≤–∞—é –∫–∞–Ω–∞–ª—ã...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda self, text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await compare_channels_command(fake_update, context)
            
        elif data == "report_status":
            await query.edit_message_text("üìä –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda self, text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await status_command(fake_update, context)
            
        # === –ê–ù–ê–õ–ò–¢–ò–ö–ê ===
        elif data == "analytics_menu":
            await query.edit_message_text(
                text="üìà **–ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
                parse_mode='Markdown',
                reply_markup=get_analytics_menu()
            )
            
        elif data == "analytics_channels_chart":
            await query.edit_message_text("üìä –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –∫–∞–Ω–∞–ª–æ–≤...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda self, text, **kwargs: query.edit_message_text(text, **kwargs),
                    'reply_photo': lambda self, photo, **kwargs: query.message.reply_photo(photo, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await channels_chart_command(fake_update, context)
            
        elif data == "analytics_segments_chart":
            await query.edit_message_text("ü•ß –°–æ–∑–¥–∞—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å–µ–≥–º–µ–Ω—Ç–æ–≤...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs),
                    'reply_photo': lambda photo, **kwargs: query.message.reply_photo(photo, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await segments_chart_command(fake_update, context)
            
        elif data == "analytics_test_metrika":
            await query.edit_message_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await test_metrika_command(fake_update, context)
            
        # === –ö–ê–ù–ê–õ–´ ===
        elif data == "channels_menu":
            await query.edit_message_text(
                text="üéØ **–ö–ê–ù–ê–õ–´ –ü–†–ò–í–õ–ï–ß–ï–ù–ò–Ø**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='Markdown',
                reply_markup=get_channels_menu()
            )
            
        elif data == "channels_all":
            await query.edit_message_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await channels_command(fake_update, context)
            
        elif data == "channels_chart":
            await query.edit_message_text("üìà –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs),
                    'reply_photo': lambda photo, **kwargs: query.message.reply_photo(photo, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await channels_chart_command(fake_update, context)
            
        elif data == "channels_compare":
            await query.edit_message_text("‚öñÔ∏è –°—Ä–∞–≤–Ω–∏–≤–∞—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await compare_channels_command(fake_update, context)
            
        # === –°–ï–ì–ú–ï–ù–¢–´ ===
        elif data == "segments_menu":
            await query.edit_message_text(
                text="üë• **–°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:",
                parse_mode='Markdown',
                reply_markup=get_segments_menu()
            )
            
        elif data == "segments_analysis":
            await query.edit_message_text("üë• –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–µ–≥–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await segments_command(fake_update, context)
            
        elif data == "segments_chart":
            await query.edit_message_text("ü•ß –°–æ–∑–¥–∞—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å–µ–≥–º–µ–Ω—Ç–æ–≤...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs),
                    'reply_photo': lambda photo, **kwargs: query.message.reply_photo(photo, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await segments_chart_command(fake_update, context)
            
        elif data == "segments_managers":
            await query.edit_message_text("üë®‚Äçüíº –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await managers_command(fake_update, context)
            
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï (–ê–î–ú–ò–ù–´) ===
        elif data == "admin_menu":
            if user_id not in ADMIN_IDS:
                await query.edit_message_text(
                    f"{EMOJI['error']} –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –†–∞–∑–¥–µ–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
                )
                return
                
            await query.edit_message_text(
                text="‚öôÔ∏è **–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='Markdown',
                reply_markup=get_admin_menu()
            )
            
        elif data == "admin_update":
            if user_id not in ADMIN_IDS:
                await query.edit_message_text(f"{EMOJI['error']} –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
                return
                
            await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await update_command(fake_update, context)
            
        elif data == "admin_reserves":
            if user_id not in ADMIN_IDS:
                await query.edit_message_text(f"{EMOJI['error']} –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
                return
                
            await query.edit_message_text("üè® –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ RestoPlace...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await reserves_command(fake_update, context)
            
        elif data == "admin_alerts":
            if user_id not in ADMIN_IDS:
                await query.edit_message_text(f"{EMOJI['error']} –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
                return
                
            await query.edit_message_text("üîî –£–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await alerts_command(fake_update, context)
            
        elif data == "admin_test_sheets":
            if user_id not in ADMIN_IDS:
                await query.edit_message_text(f"{EMOJI['error']} –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
                return
                
            await query.edit_message_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await test_google_sheets_command(fake_update, context)
            
        elif data == "admin_test_metrika":
            if user_id not in ADMIN_IDS:
                await query.edit_message_text(f"{EMOJI['error']} –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
                return
                
            await query.edit_message_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–µ...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await test_metrika_command(fake_update, context)
            
        elif data == "admin_test_all":
            if user_id not in ADMIN_IDS:
                await query.edit_message_text(f"{EMOJI['error']} –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
                return
                
            await query.edit_message_text("üîß –¢–µ—Å—Ç–∏—Ä—É—é –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            fake_update = type('FakeUpdate', (), {
                'message': type('FakeMessage', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })(),
                'effective_user': update.effective_user
            })()
            await test_all_connections_command(fake_update, context)
            
        # === –ü–û–ú–û–©–¨ ===
        elif data == "help_menu":
            await query.edit_message_text(
                text="üì± **–°–ü–†–ê–í–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                parse_mode='Markdown',
                reply_markup=get_help_menu()
            )
            
        elif data == "help_commands":
            help_text = f"""
üìñ **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú**

{EMOJI['chart_up']} **–û—Ç—á—ë—Ç—ã:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏ - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ —Å —É—á—ë—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è

{EMOJI['target']} **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –∫–∞–Ω–∞–ª–æ–≤ - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –¢–µ—Å—Ç –ú–µ—Ç—Ä–∏–∫–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

{EMOJI['people']} **–ö–ª–∏–µ–Ω—Ç—ã:**
‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è - –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
‚Ä¢ VIP-–∫–ª–∏–µ–Ω—Ç—ã - —Ü–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã

{EMOJI['gear']} **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∞–¥–º–∏–Ω—ã):**
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
‚Ä¢ RestoPlace - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
"""
            await query.edit_message_text(help_text, parse_mode='Markdown', reply_markup=get_help_menu())
            
        elif data == "help_metrics":
            metrics_text = f"""
üéØ **–ú–ï–¢–†–ò–ö–ò –ö–ê–†–ê–û–ö–ï-–†–Æ–ú–û–ß–ù–û–ô**

üí∞ **CAC (Customer Acquisition Cost):**
–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
= –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

üíé **LTV (Lifetime Value):**
–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
= –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ √ó –ß–∞—Å—Ç–æ—Ç–∞ –≤–∏–∑–∏—Ç–æ–≤ √ó –ü–µ—Ä–∏–æ–¥ –∂–∏–∑–Ω–∏

üìä **ROI (Return on Investment):**
–í–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
= (–î–æ—Ö–æ–¥ - –†–∞—Å—Ö–æ–¥—ã) / –†–∞—Å—Ö–æ–¥—ã √ó 100%

üé§ **–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∫–∞—Ä–∞–æ–∫–µ:**
‚Ä¢ –î–µ–∫–∞–±—Ä—å: +50% (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã)
‚Ä¢ –õ–µ—Ç–æ: -10% (–æ—Ç–ø—É—Å–∫–∞)  
‚Ä¢ –ü—è—Ç–Ω–∏—Ü–∞-—Å—É–±–±–æ—Ç–∞: –ø–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤—Ç–æ—Ä–Ω–∏–∫: –º–∏–Ω–∏–º—É–º

üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:**
–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π, —Å—Ç–∞–≤—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞–º–∏
"""
            await query.edit_message_text(metrics_text, parse_mode='Markdown', reply_markup=get_help_menu())
            
        elif data == "help_about":
            about_text = f"""
üé§ **–û –ö–ê–†–ê–û–ö–ï-–†–Æ–ú–û–ß–ù–û–ô "–ï–í–ì–ï–ù–ò–ß –°–ü–ë"**

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ, —Å–æ—á–µ—Ç–∞—é—â–µ–µ:

üçª **–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞:**
‚Ä¢ –£—é—Ç–Ω–∞—è —Ä—é–º–æ—á–Ω–∞—è —Å –¥–æ–º–∞—à–Ω–µ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—Ä–∞–æ–∫–µ-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ –∑–∞–ª—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π

üéØ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞:**
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞
‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∏

üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç:**
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–ª–æ–≤
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ä—É—á–∫—É
‚Ä¢ –£–ª—É—á—à–∞—Ç—å —Å–µ—Ä–≤–∏—Å
"""
            await query.edit_message_text(about_text, parse_mode='Markdown', reply_markup=get_help_menu())
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤
        else:
            await query.edit_message_text(
                f"{EMOJI['error']} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_main_menu()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback handler: {e}")
        await query.edit_message_text(
            f"{EMOJI['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫"""
    text = update.message.text
    user_id = update.effective_user.id
    
    try:
        if text == "üìä –û—Ç—á—ë—Ç—ã":
            await update.message.reply_text(
                "üìä **–û–¢–ß–Å–¢–´**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
                parse_mode='Markdown',
                reply_markup=get_reports_menu()
            )
            
        elif text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
            await update.message.reply_text(
                "üìà **–ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
                parse_mode='Markdown',
                reply_markup=get_analytics_menu()
            )
            
        elif text == "üéØ –ö–∞–Ω–∞–ª—ã":
            await update.message.reply_text(
                "üéØ **–ö–ê–ù–ê–õ–´ –ü–†–ò–í–õ–ï–ß–ï–ù–ò–Ø**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='Markdown',
                reply_markup=get_channels_menu()
            )
            
        elif text == "üë• –°–µ–≥–º–µ–Ω—Ç—ã":
            await update.message.reply_text(
                "üë• **–°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:",
                parse_mode='Markdown',
                reply_markup=get_segments_menu()
            )
            
        elif text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
            if user_id not in ADMIN_IDS:
                await update.message.reply_text(
                    f"{EMOJI['error']} –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –†–∞–∑–¥–µ–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
                )
                return
                
            await update.message.reply_text(
                "‚öôÔ∏è **–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='Markdown',
                reply_markup=get_admin_menu()
            )
            
        elif text == "üì± –ü–æ–º–æ—â—å":
            await update.message.reply_text(
                "üì± **–°–ü–†–ê–í–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                parse_mode='Markdown',
                reply_markup=get_help_menu()
            )
            
        else:
            # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
            quick_actions_text = f"""
‚ö° **–ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
"""
            await update.message.reply_text(
                quick_actions_text,
                parse_mode='Markdown',
                reply_markup=get_quick_actions()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ message handler: {e}")
        await update.message.reply_text(
            f"{EMOJI['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
