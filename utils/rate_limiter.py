"""
Rate Limiting middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞
"""

import time
import logging
from functools import wraps
from typing import Dict, Optional
from telegram import Update
from telegram.ext import ContextTypes
from services.cache import CacheService
from config import RATE_LIMIT_PER_MINUTE, EMOJI

logger = logging.getLogger(__name__)

class RateLimiter:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, cache_service: Optional[CacheService] = None):
        self.cache = cache_service or CacheService()
        self.rate_limit = RATE_LIMIT_PER_MINUTE
        
    async def is_rate_limited(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            current_time = int(time.time())
            minute_window = current_time // 60  # –û–∫–Ω–æ –≤ 1 –º–∏–Ω—É—Ç—É
            
            key = f"rate_limit:{user_id}:{minute_window}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            current_requests = await self.cache.get(key)
            
            if current_requests is None:
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —ç—Ç–æ–º –æ–∫–Ω–µ
                await self.cache.set(key, 1, expire=70)  # TTL —á—É—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
                return False
            
            current_count = int(current_requests)
            
            if current_count >= self.rate_limit:
                return True
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
            await self.cache.increment(key)
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ rate limiter: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return False
    
    async def get_remaining_requests(self, user_id: int) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        try:
            current_time = int(time.time())
            minute_window = current_time // 60
            key = f"rate_limit:{user_id}:{minute_window}"
            
            current_requests = await self.cache.get(key)
            
            if current_requests is None:
                return self.rate_limit
            
            used_requests = int(current_requests)
            return max(0, self.rate_limit - used_requests)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return self.rate_limit
    
    async def get_time_until_reset(self, user_id: int) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–µ–∫—É–Ω–¥—ã –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
        """
        current_time = int(time.time())
        seconds_in_current_minute = current_time % 60
        return 60 - seconds_in_current_minute

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä rate limiter
rate_limiter = RateLimiter()

def rate_limit(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è rate limiting –∫ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        
    Returns:
        –û–±—ë—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π rate limit
    """
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        if await rate_limiter.is_rate_limited(user_id):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            remaining_time = await rate_limiter.get_time_until_reset(user_id)
            
            limit_message = f"""
{EMOJI['warning']} **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**

–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥. –ú–∞–∫—Å–∏–º—É–º **{RATE_LIMIT_PER_MINUTE} –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É**.

‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ **{remaining_time} —Å–µ–∫—É–Ω–¥**.

üí° –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞—â–∏—â–∞–µ—Ç –±–æ—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""
            
            await update.message.reply_text(limit_message, parse_mode='Markdown')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            logger.warning(f"Rate limit exceeded for user {user_id} (@{update.effective_user.username})")
            
            return
        
        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await func(update, context)
    
    return wrapper

def admin_rate_limit(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º rate limiting –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        
    Returns:
        –û–±—ë—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π rate limit –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    """
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        from config import ADMIN_IDS
        
        user_id = update.effective_user.id
        
        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≤ 3 —Ä–∞–∑–∞
        admin_limiter = RateLimiter()
        admin_limiter.rate_limit = RATE_LIMIT_PER_MINUTE * 3
        
        if user_id in ADMIN_IDS:
            if await admin_limiter.is_rate_limited(user_id):
                remaining_time = await admin_limiter.get_time_until_reset(user_id)
                
                limit_message = f"""
{EMOJI['warning']} **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (–∞–¥–º–∏–Ω)**

–ú–∞–∫—Å–∏–º—É–º **{admin_limiter.rate_limit} –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É**.

‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ **{remaining_time} —Å–µ–∫—É–Ω–¥**.
"""
                
                await update.message.reply_text(limit_message, parse_mode='Markdown')
                return
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç
            if await rate_limiter.is_rate_limited(user_id):
                remaining_time = await rate_limiter.get_time_until_reset(user_id)
                
                limit_message = f"""
{EMOJI['warning']} **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**

–ú–∞–∫—Å–∏–º—É–º **{RATE_LIMIT_PER_MINUTE} –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É**.

‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ **{remaining_time} —Å–µ–∫—É–Ω–¥**.
"""
                
                await update.message.reply_text(limit_message, parse_mode='Markdown')
                return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await func(update, context)
    
    return wrapper

async def get_rate_limit_stats(user_id: int) -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    remaining = await rate_limiter.get_remaining_requests(user_id)
    reset_time = await rate_limiter.get_time_until_reset(user_id)
    
    return {
        'limit': RATE_LIMIT_PER_MINUTE,
        'remaining': remaining,
        'used': RATE_LIMIT_PER_MINUTE - remaining,
        'reset_in_seconds': reset_time
    }
