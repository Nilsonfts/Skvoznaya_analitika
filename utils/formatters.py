"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—á–∏—Å—Ç–∫–∏
"""

import re
from typing import Union, Optional
from datetime import datetime

def format_currency(amount: Union[int, float], currency: str = '‚ÇΩ') -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º
    
    Args:
        amount: –°—É–º–º–∞
        currency: –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É–±–ª–∏)
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –≤–∞–ª—é—Ç–æ–π
    """
    if amount == 0:
        return f"0 {currency}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    formatted = f"{amount:,.0f}".replace(',', ' ')
    return f"{formatted} {currency}"

def format_percentage(value: Union[int, float], decimal_places: int = 1) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.15 –¥–ª—è 15%)
        decimal_places: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    """
    percentage = value * 100
    return f"{percentage:.{decimal_places}f}%"

def format_number(value: Union[int, float], decimal_places: int = 0) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    
    Args:
        value: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        decimal_places: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if decimal_places == 0:
        formatted = f"{value:,.0f}"
    else:
        formatted = f"{value:,.{decimal_places}f}"
    
    return formatted.replace(',', ' ')

def clean_phone(phone: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        phone: –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
    """
    if not phone:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    cleaned = re.sub(r'[^\d]', '', str(phone))
    
    # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â—É—é 8 –∏–ª–∏ 7 –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    if cleaned.startswith('8') and len(cleaned) == 11:
        cleaned = '7' + cleaned[1:]
    elif cleaned.startswith('7') and len(cleaned) == 11:
        pass  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    
    return cleaned

def normalize_email(email: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞
    
    Args:
        email: –ò—Å—Ö–æ–¥–Ω—ã–π email
    
    Returns:
        –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π email –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    """
    if not email:
        return ""
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    normalized = str(email).lower().strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(email_pattern, normalized):
        return normalized
    
    return ""

def format_date(date_input: Union[str, datetime], output_format: str = '%Y-%m-%d %H:%M:%S') -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        date_input: –î–∞—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        output_format: –ñ–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not date_input:
        return ""
    
    # –ï—Å–ª–∏ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
    if isinstance(date_input, datetime):
        return date_input.strftime(output_format)
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    input_formats = [
        '%Y-%m-%d %H:%M:%S',
        '%Y-%m-%d',
        '%d.%m.%Y %H:%M:%S',
        '%d.%m.%Y',
        '%d/%m/%Y %H:%M:%S',
        '%d/%m/%Y',
        '%Y-%m-%dT%H:%M:%S',
        '%Y-%m-%dT%H:%M:%SZ'
    ]
    
    date_str = str(date_input).strip()
    
    for fmt in input_formats:
        try:
            parsed_date = datetime.strptime(date_str, fmt)
            return parsed_date.strftime(output_format)
        except ValueError:
            continue
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return date_str

def format_duration(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        seconds: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2–º 30—Å")
    """
    if seconds < 60:
        return f"{seconds}—Å"
    
    minutes = seconds // 60
    remaining_seconds = seconds % 60
    
    if minutes < 60:
        if remaining_seconds > 0:
            return f"{minutes}–º {remaining_seconds}—Å"
        else:
            return f"{minutes}–º"
    
    hours = minutes // 60
    remaining_minutes = minutes % 60
    
    if remaining_minutes > 0:
        return f"{hours}—á {remaining_minutes}–º"
    else:
        return f"{hours}—á"

def format_rating_stars(rating: float, max_stars: int = 5) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –≤–∏–¥–µ –∑–≤–µ–∑–¥
    
    Args:
        rating: –†–µ–π—Ç–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4.2)
        max_stars: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏
    """
    full_stars = int(rating)
    half_star = 1 if (rating - full_stars) >= 0.5 else 0
    empty_stars = max_stars - full_stars - half_star
    
    stars = "‚òÖ" * full_stars
    if half_star:
        stars += "‚òÜ"
    stars += "‚òÜ" * empty_stars
    
    return stars

def format_change_indicator(current: float, previous: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å emoji
    
    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        previous: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    """
    if previous == 0:
        if current > 0:
            return "üìà –†–æ—Å—Ç"
        else:
            return "‚ûñ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    
    change = (current - previous) / previous
    change_percent = abs(change) * 100
    
    if change > 0.05:  # –†–æ—Å—Ç –±–æ–ª–µ–µ 5%
        return f"üìà +{change_percent:.1f}%"
    elif change < -0.05:  # –°–Ω–∏–∂–µ–Ω–∏–µ –±–æ–ª–µ–µ 5%
        return f"üìâ -{change_percent:.1f}%"
    else:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω–µ–µ 5%
        return f"‚ûñ {change_percent:.1f}%"

def format_status_emoji(value: float, thresholds: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –ø–æ–º–æ—â—å—é emoji –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        thresholds: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ—Ä–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ {'good': 0.8, 'ok': 0.5}
    
    Returns:
        Emoji –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
    """
    good_threshold = thresholds.get('good', 0.8)
    ok_threshold = thresholds.get('ok', 0.5)
    
    if value >= good_threshold:
        return "üü¢"  # –ó–µ–ª–µ–Ω—ã–π - —Ö–æ—Ä–æ—à–æ
    elif value >= ok_threshold:
        return "üü°"  # –ñ–µ–ª—Ç—ã–π - –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    else:
        return "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π - –ø–ª–æ—Ö–æ

def truncate_text(text: str, max_length: int = 50, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text or len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix

def clean_utm_parameter(utm_value: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    
    Args:
        utm_value: –ó–Ω–∞—á–µ–Ω–∏–µ UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    
    Returns:
        –û—á–∏—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    if not utm_value:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    cleaned = str(utm_value).strip().lower()
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[^\w\-_.]', '', cleaned)
    
    return cleaned

def format_table_row(data: list, widths: list, separator: str = " | ") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏
        widths: –®–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
        separator: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    """
    formatted_cells = []
    
    for i, (cell, width) in enumerate(zip(data, widths)):
        cell_str = str(cell)
        if len(cell_str) > width:
            cell_str = cell_str[:width-3] + "..."
        formatted_cells.append(cell_str.ljust(width))
    
    return separator.join(formatted_cells)

def format_bytes(bytes_value: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        bytes_value: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.5 MB")
    """
    units = ['B', 'KB', 'MB', 'GB', 'TB']
    size = float(bytes_value)
    unit_index = 0
    
    while size >= 1024 and unit_index < len(units) - 1:
        size /= 1024
        unit_index += 1
    
    if unit_index == 0:
        return f"{int(size)} {units[unit_index]}"
    else:
        return f"{size:.1f} {units[unit_index]}"

def validate_phone(phone: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Args:
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Returns:
        True –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω
    """
    cleaned = clean_phone(phone)
    
    # –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7
    if len(cleaned) == 11 and cleaned.startswith('7'):
        return True
    
    # –ù–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã (10 —Ü–∏—Ñ—Ä)
    if len(cleaned) == 10:
        return True
    
    return False

def validate_email(email: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞
    
    Args:
        email: Email –∞–¥—Ä–µ—Å
    
    Returns:
        True –µ—Å–ª–∏ email –≤–∞–ª–∏–¥–µ–Ω
    """
    if not email:
        return False
    
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(email_pattern, email.strip()))

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    
    Returns:
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
    
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram Markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    escaped_text = str(text)
    for char in special_chars:
        escaped_text = escaped_text.replace(char, f'\\{char}')
    
    return escaped_text
